package main.Part_four_SpringMVC;

public class Lesson_44_SpringMVC_ValidationData {
    // Итак, мы научились с помощью форм создавать некий опросник куда мы забиваем информацию.
    // Подобное мы можем встретить при регистрации нового аккаунта на почте. Теперь поговорим
    // о валидации(проверке) заполненных данных. Вспоминаем, когда мы некорректно заполняем
    // данные в полях, нам подсказывают, что в пароле мало символов, поле не может быть пустым,
    // запрещено использовать некие символы, обязательны буквы верхнего регистра и тому подобное.
    // Вот такие проверки мы и начнем изучать.

    // Вернемся немного назад и вспомним Hibernate. Как мы помним в java существует понятие
    // JPA, которое является спецификацией описывающей правила сохранения объектов в таблицы,
    // а Hibernate это наиболее популярная реализация данной спецификации.
    // Так вот, касательно валидации в java тоже существует спецификация, называется она
    // Java Standard Bean Validation API. Эта спецификация описывает правила валидации данных.
    // Реализацию данной спецификации, внезапно, нам тоже предоставляет Hibernate, называется
    // эта реализация Hibernate Validator.

    // Прежде чем начать работу, необходимо добавить зависимости в pom.xml, для этого в maven
    // repository ищем Hibernate Validator Engine Relocation Artifact

    // Что мы будем делать? Мы будем вводить данные в форму, как и до этого, данные передаются
    // контроллеру, если все в порядке мы увидим эти данные в представлении, если что-то будет
    // несоответствовать нашим условиям, контроллер вернет форму с сообщением об ошибке
    // в такой-то форме.

    // Все данные у нас сохраняются в соответствующих полях класса Employee, значит вполне логично,
    // что ограничения мы будем выставлять именно для этих полей. Перейдем в класс Employee на 8 строку
}
