package main.Part_four_SpringMVC;

public class Lesson_35_SpringMVCConfiguration {

    // Мы создали новый проект для работы с технологией WEB. При создании мы указали архетип
    // webapp. Теперь нам необходимо настроить конфигурацию проекта.

    // Сначала добавим необходимые зависимости в pom.xml, перейдем туда в раздел dependencies.

    // Теперь наш проект готов к разработке web-приложения. Однако у нас остался один нерешенный момент.
    // Чтобы разрабатывать веб-приложение нам неплохо было бы иметь какой-то сервер на котором
    // у нас будет находиться наше приложение. Здесь нам поможет замечательная программа Tomcat.

    // Tomcat - это http сервер и контейнер сервлетов в одном лице. Разработан компанией Apache
    // и работает на Java. Сервлет - это некий веб-компонент управляемый контейнером, этот
    // компонент генерирует динамический контент. Эдакий бин. Если объяснять на пальцах, то
    // специальный модуль Tomcat слушает определенный порт, когда по этому порту приходит
    // запрос, то в зависимости от запроса запускается определенный сервлет, который
    // генерирует контент. По своей сути, это java-классы которые динамически запускаются
    // контейнером.

    // Теперь установим Tomcat, для этого мы скачали его с сайта Apache и распаковали в удобную
    // для нас папку, желательно, чтобы к этой папке не нужен был доступ администратора.
    // Далее в ide мы нажимаем кнопку run-edit configurations, где нажимаем плюс, выбираем внизу
    // Tomcat сервер, указываем в какой папке он у нас находится. Далее переходим во вкладку
    // deployment, нажимаем там плюс и выбираем пункт с названием нашего проекта в конце
    // которого будет написано :war exploded. Это необходимо для деплоя на наш веб-сервер.

    // Подготовка закончена, теперь снова нажимаем на run и запускаем наш сервер.
    // После успешного запуска желательно перезапустить ide.

    // Не забываем выбрать source root.

    // Теперь нам необходимо сконфигурировать файл web.xml, в нашем случае он находится в
    // main/webapp/WEB-INF, перейдем в этот файл.

    // Теперь нам необходимо задать конфигурацию самого Spring, для этого в пакете WEB-INF
    // мы создадим файл applicationContext.xml. В целом там ничего нового, определяем область имен,
    // указываем пакет в котором будет проходить сканирование, однако есть отличие.
    // Этой записью мы указываем MVC форматирование, пока не будем на этом заостряться.
//    <mvc:annotation-driven/>
    // а здесь мы описываем бин для view, вспоминаем, что view это представление для пользователя.
    // Указываем пакет где лежит наш view и указываем префикс и суффикс. Для чего это делается?
    // В пакете WEB-INF мы создали пакет view, в нем будут храниться все наши view,
    // если здесь мы не укажем префикс и суффикс, при каждом обращении к этим классам, нам
    // нужно будет писать полное имя этого view. Допустим у нас есть view myView, обращение к
    // нему будет: /WEB-INF/view/myView.jsp, однако так как мы уже прописали это в настройках,
    // теперь будет достаточно обращаться просто по его имени.
//    <bean
//    class="org.springframework.web.servlet.view.InternalResourceViewResolver">
//        <property name="prefix" value="/WEB-INF/view/" />
//        <property name="suffix" value=".jsp" />
//    </bean>
}
